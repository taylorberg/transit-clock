/*
 * TransitClock
 * Copyright (C) 2023-2024 Taylor Berg
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef TRANSIT_CLOCK_PREDICTION_H
#define TRANSIT_CLOCK_PREDICTION_H

#include "Stop.h"
#include "Route.h"
#include <chrono>

class Agency;

class Prediction
{
public:
    Prediction();
    Prediction(const Agency * agency,
               const Stop * stop,
               const Route * route,
               std::chrono::system_clock::time_point arrival_time,
               std::chrono::system_clock::time_point prediction_time = std::chrono::system_clock::now(),
               uint64_t distance = 0,
               bool delay = false,
               uint8_t percent_full = 0) :
                       mAgency(agency),
                       mStop(stop),
                       mRoute(route),
                       mArrivalTime(arrival_time),
                       mPredictionTime(prediction_time),
                       mDistanceInCentimeters(distance),
                       mIsDelayed(false),
                       mPercentFull(percent_full)
    {
        if (mStop == nullptr)
        {
            throw std::runtime_error("Prediction registered without stop");
        }
    }

    ~Prediction() = default;

    /**
     * Gets the agency that generated this prediction.
     */
    const Agency * agency() const { return mAgency; }

    /**
     * Gets the stop associated with this prediction.
     */
    const Stop * stop() const { return mStop; }

    /**
     * Gets the route associated with this prediction.
     * @return
     */
    const Route * route() const { return mRoute; }

    /**
     * Gets the arrival time of the vehicle associated with this prediction at the given stop.
     */
    std::chrono::system_clock::time_point arrival_time() const { return mArrivalTime; }

    /**
     * Gets the time this prediction was generated by the system.
     */
    std::chrono::system_clock::time_point prediction_time() const { return mPredictionTime; }

    /**
     * Gets the distance remaining for the vehicle to travel, in centimeters.
     */
    uint64_t distance() const { return mDistanceInCentimeters; }

    /**
     * Returns true if the trip associated with this prediction is delayed.
     */
    bool delayed() const { return mIsDelayed; }

    /**
     * Gets the percentage the vehicle is full (as an integer from 0 to 100)
     */
    uint8_t percent_full() const { return mPercentFull; }

    bool operator<(const Prediction & rhs) const;
    bool operator>(const Prediction & rhs) const;
    bool operator<=(const Prediction & rhs) const;
    bool operator>=(const Prediction & rhs) const;

private:
    const Agency * mAgency;
    const Stop * mStop;
    const Route * mRoute;
    std::chrono::system_clock::time_point mArrivalTime;
    std::chrono::system_clock::time_point mPredictionTime;
    uint64_t mDistanceInCentimeters;
    bool mIsDelayed;
    uint8_t mPercentFull;
};

#endif //TRANSIT_CLOCK_PREDICTION_H
